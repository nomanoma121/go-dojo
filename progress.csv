Day,Topic,Status,Start Date,Complete Date,Hours Spent,Difficulty (1-5),Notes,Key Learnings
01,Context Cancellation,Not Started,,,,,Goroutineのツリーにキャンセルのシグナルを正しく伝える,
02,Context Timeout,Not Started,,,,,外部API呼び出しなど時間のかかる処理にタイムアウトを設定,
03,Mutex vs RWMutex,Not Started,,,,,読み取りと書き込みの競合状態を制御しパフォーマンスを比較,
04,sync.Once,Not Started,,,,,一度しか実行したくない初期化処理をスレッドセーフに実装,
05,sync.Pool,Not Started,,,,,GCの負荷を軽減するためのオブジェクトプーリングを実装,
06,Worker Pool Pattern,Not Started,,,,,決まった数のGoroutineで大量のタスクを効率的に処理,
07,Worker Pool Results,Not Started,,,,,各ワーカーからの処理結果を安全に収集,
08,Fan-in/Fan-out,Not Started,,,,,複数のデータソースを一つにまとめ並列処理させるパイプライン構築,
09,Error Handling Pipeline,Not Started,,,,,並行処理パイプライン内で発生したエラーを適切に処理,
10,Rate Limiter,Not Started,,,,,time.Tickerを使い一定間隔で処理を許可するレートリミッター実装,
11,Semaphore Pattern,Not Started,,,,,同時に実行できる処理の数を制限するセマフォを実装,
12,Future/Promise,Not Started,,,,,非同期処理の結果を後から受け取れるFutureを実装,
13,Circuit Breaker,Not Started,,,,,外部サービスの障害が自身のシステムに波及するのを防ぐ回路を実装,
14,Thread-safe Cache,Not Started,,,,,sync.MapまたはRWMutexを使い並行アクセス可能なインメモリキャッシュ実装,
15,Generator Pattern,Not Started,,,,,チャネルを使い値を逐次生成するジェネレータ関数を実装,