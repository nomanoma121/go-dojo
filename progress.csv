Day,Topic,Status,Start Date,Complete Date,Hours Spent,Difficulty (1-5),Notes,Key Learnings
01,Context Cancellation,Not Started,,,,,Goroutineのツリーにキャンセルのシグナルを正しく伝える,
02,Context Timeout,Not Started,,,,,外部API呼び出しなど時間のかかる処理にタイムアウトを設定,
03,Mutex vs RWMutex,Not Started,,,,,読み取りと書き込みの競合状態を制御しパフォーマンスを比較,
04,sync.Once,Not Started,,,,,一度しか実行したくない初期化処理をスレッドセーフに実装,
05,sync.Pool,Not Started,,,,,GCの負荷を軽減するためのオブジェクトプーリングを実装,
06,Worker Pool Pattern,Not Started,,,,,決まった数のGoroutineで大量のタスクを効率的に処理,
07,Worker Pool Results,Not Started,,,,,各ワーカーからの処理結果を安全に収集,
08,Fan-in/Fan-out,Not Started,,,,,複数のデータソースを一つにまとめ並列処理させるパイプライン構築,
09,Error Handling Pipeline,Not Started,,,,,並行処理パイプライン内で発生したエラーを適切に処理,
10,Rate Limiter,Not Started,,,,,time.Tickerを使い一定間隔で処理を許可するレートリミッター実装,
11,Semaphore Pattern,Not Started,,,,,同時に実行できる処理の数を制限するセマフォを実装,
12,Future/Promise,Not Started,,,,,非同期処理の結果を後から受け取れるFutureを実装,
13,Circuit Breaker,Not Started,,,,,外部サービスの障害が自身のシステムに波及するのを防ぐ回路を実装,
14,Thread-safe Cache,Not Started,,,,,sync.MapまたはRWMutexを使い並行アクセス可能なインメモリキャッシュ実装,
15,Generator Pattern,Not Started,,,,,チャネルを使い値を逐次生成するジェネレータ関数を実装,
16,HTTP Server Timeouts,Not Started,,,,,Read/Write/Idleの各タイムアウトを設定しサーバーの安定性を高める,
17,Graceful Shutdown,Not Started,,,,,OSのシグナルを受け取り処理中のリクエストを終えてから安全にサーバーを停止,
18,Request Body Limits,Not Started,,,,,不正に大きいリクエストからサーバーを保護,
19,Request Validation,Not Started,,,,,リクエスト内容を検証し詳細なエラーを返すロジックを実装,
20,Structured Logging,Not Started,,,,,slogを使いリクエストIDを含むアクセスログを出力するミドルウェア作成,
21,Auth Middleware,Not Started,,,,,HTTPヘッダーからトークンを読み取りリクエストを認証,
22,Panic Recovery,Not Started,,,,,ハンドラ内で発生したパニックを捕捉し500エラーを返す,
23,IP Rate Limiting,Not Started,,,,,特定のIPからのアクセス頻度を制限,
24,CORS Security,Not Started,,,,,特定のオリジンからのリクエストのみを許可するCORSミドルウェア実装,
25,Timing Attack Protection,Not Started,,,,,crypto/subtleを使いパスワードなどの比較を安全に行う,
26,Middleware Testing,Not Started,,,,,複数のミドルウェアが正しく連携して動作することをテスト,
27,Dockertest E2E,Not Started,,,,,テスト実行時にDBコンテナを起動しAPIのE2Eテストを行う,
28,Table-driven Tests,Not Started,,,,,複雑なケースを網羅する可読性の高いテストを実装,
29,Mockery,Not Started,,,,,インターフェースからテスト用のモックを自動生成,
30,Benchmark Testing,Not Started,,,,,go test -benchを使い関数のパフォーマンスを測定・比較,
31,Advanced Transactions,Not Started,,,,,複数のDB操作を単一のトランザクションにまとめエラー時にロールバック,
32,Exponential Backoff,Not Started,,,,,一時的なDBエラーに対し時間をおいて処理を再試行するロジック実装,
33,Deadlock Handling,Not Started,,,,,DBのデッドロックが発生しうる状況を理解しそれを回避,
34,Repository Pattern,Not Started,,,,,DB操作のロジックをカプセル化しビジネスロジックから分離,
35,N+1 Problem,Not Started,,,,,ループ内でのクエリ発行を検出し一括取得でパフォーマンス改善,
36,Dataloader Pattern,Not Started,,,,,N+1問題を効率的に解決するためのデータローダーを実装,
37,Connection Pooling,Not Started,,,,,sql.DBのコネクションプール設定を調整しパフォーマンス最適化,
38,DB Indexing,Not Started,,,,,クエリを高速化するためのインデックスの効果をEXPLAINで確認,
39,SQLx Usage,Not Started,,,,,database/sqlの煩雑さをsqlxで解消,
40,Read Replica,Not Started,,,,,更新系と参照系のクエリを別のDBに振り分けるロジック実装,
41,Redis Caching,Not Started,,,,,go-redisを使いRedisに接続,
42,Cache-Aside Pattern,Not Started,,,,,キャッシュにデータがなければDBから取得しキャッシュに格納,
43,Write-Through Pattern,Not Started,,,,,DBへの書き込みと同時にキャッシュも更新,
44,Cache Invalidation,Not Started,,,,,DB更新時に関連するキャッシュを削除または更新,
45,Thundering Herd,Not Started,,,,,キャッシュ切れの際に単一のプロセスのみがDBにアクセスするよう制御,
46,gRPC Error Handling,Not Started,,,,,statusパッケージを使いgRPCで詳細なエラー情報を返す,
47,gRPC Server Streaming,Not Started,,,,,サーバーからクライアントへ複数のレスポンスを継続的に送信,
48,gRPC Client Streaming,Not Started,,,,,クライアントからサーバーへ複数のリクエストを継続的に送信,
49,gRPC Bidirectional,Not Started,,,,,サーバーとクライアントが同時にメッセージを送り合う,
50,Unary Interceptor,Not Started,,,,,全てのUnary RPCで共通の処理（ログ、認証）を挟み込む,
51,Stream Interceptor,Not Started,,,,,全てのStream RPCで共通の処理を挟み込む,
52,gRPC Metadata,Not Started,,,,,リクエストIDなどをgRPCのメタデータでサービス間に引き渡す,
53,Idempotent Consumer,Not Started,,,,,同じメッセージを複数回受信しても結果が変わらないコンシューマー設計,
54,Dead Letter Queue,Not Started,,,,,処理に失敗し続けるメッセージを隔離する仕組みをRabbitMQで実装,
55,Message Ordering,Not Started,,,,,メッセージの処理順序が重要なケースとその対策を考える,
56,Competing Consumer,Not Started,,,,,同じキューを複数のコンシューマーで処理させスループット向上,
57,Prometheus Metrics,Not Started,,,,,HTTPリクエスト数などのカスタムメトリクスを実装・公開,
58,Prometheus Histogram,Not Started,,,,,リクエストのレイテンシ分布を計測するヒストグラムを実装,
59,OpenTelemetry Tracing,Not Started,,,,,サービスをまたぐリクエストのトレース情報を設定・出力,
60,Observability Service,Not Started,,,,,slog、Prometheus、OpenTelemetryを導入したミニAPIサービス構築,